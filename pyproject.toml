[build-system]
requires = ["setuptools>=42", "versioneer[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "hedtools"
dynamic = ["version"]
description = "HED validation, summary, and analysis tools for annotating events and experimental metadata."
readme = "README.md"
authors = [
    { name = "VisLab" },
    { name = "Ian Callanan" },
    { name = "Monique Dennisen"},
    { name = "Jeremy Cockfield" },
    { name = "Alexander Jones" },
    { name = "Owen Winterberg" },
    { name = "Kay Robbins", email = "Kay.Robbins@utsa.edu" },
]
maintainers = [
    { name = "Kay Robbins", email = "Kay.Robbins@utsa.edu" },
]
license = {text = "MIT"}
keywords = ["HED", "hierarchical event descriptors", "validation", "neuroscience", "BIDS", "events", "metadata", "annotation"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
]

requires-python = ">=3.9"

dependencies = [
    "defusedxml",
    "et-xmlfile",
    "inflect",
    "jsonschema",
    "matplotlib>=3.9.0",
    "numpy",
    "openpyxl",
    "pandas",
    "portalocker",
    "python-dateutil",
    "pytz",
    "semantic-version",
    "six",
    "wordcloud==1.9.4"
]

[project.urls]
"Homepage" = "https://www.hedtags.org/"
"Documentation" = "https://www.hedtags.org/hed-python/"
"Repository" = "https://github.com/hed-standard/hed-python/"
"Bug Tracker" = "https://github.com/hed-standard/hed-python/issues"
"Changelog" = "https://github.com/hed-standard/hed-python/blob/main/CHANGELOG.md"
"HED Resources" = "https://www.hed-resources.org"

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "codespell>=2.2.0",
]
docs = [
    "sphinx>=7.0.0",
    "furo>=2023.9.10",
    "sphinx-copybutton>=0.5.2",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "linkify-it-py>=2.0.0",
]
test = [
    "coverage>=7.0.0",
]

[project.scripts]
run_remodel = "hed.tools.remodeling.cli.run_remodel:main"
run_remodel_backup = "hed.tools.remodeling.cli.run_remodel_backup:main"
run_remodel_restore = "hed.tools.remodeling.cli.run_remodel_restore:main"
validate_bids = "hed.scripts.validate_bids:main"
hed_validate_schemas = "hed.scripts.validate_schemas:main"
hed_update_schemas = "hed.scripts.convert_and_update_schema:main"
hed_add_ids = "hed.scripts.add_hed_ids:main"
hed_create_ontology = "hed.scripts.create_ontology:main"

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "hed/_version.py"
versionfile_build = "hed/_version.py"
tag_prefix = ""
parentdir_prefix = "hedtools-"


[tool.setuptools.packages.find]
where = [""]
include = ["hed*"]
namespaces = false

[tool.setuptools.package-data]
hed = ["schema/schema_data/*.xml", "resources/*.png", "validator/data/*"]

[tool.codespell]
skip = '*.git,*.pdf,*.svg,versioneer.py,venv*,*.tsv,*.yaml,*.yml,*.json,*.rdf,*.jsonld,spec_tests,,*.xml,*.mediawiki,*.omn,*.toml'
ignore-words-list = 'te,parms,assertIn'

[tool.ruff]
# Target Python 3.9+
target-version = "py39"
line-length = 127

# Exclude common directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "hed/_version.py",  # Auto-generated by versioneer
    "spec_tests/hed-examples",
    "spec_tests/hed-specification",
]

[tool.ruff.lint]
# Enable flake8-style checks plus additional rules
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "N",     # pep8-naming
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "N802",   # Function name should be lowercase (many test methods use camelCase)
    "N803",   # Argument name should be lowercase (DataFrame df is common)
    "N806",   # Variable in function should be lowercase (common in scientific code)
    # Style rules that are too opinionated
    "SIM108", # if-else-block-instead-of-if-exp (ternary operator preference)
    "SIM105", # suppressible-exception (use contextlib.suppress)
    "SIM118", # in-dict-keys (x in dict vs x in dict.keys())
    "SIM102", # collapsible-if (nested if statements)
    "SIM103", # needless-bool (return bool vs if/else return True/False)
    "SIM110", # reimplemented-builtin (any/all reimplementation)
    "SIM101", # duplicate-isinstance-call
    # Python 3.10+ features (we support 3.9)
    "UP007",  # Use X | Y for Union types (requires 3.10+)
    "UP008",  # Use super() without parameters (we're okay with explicit)
    "UP031",  # Use format strings over %-formatting (legacy code compatibility)
    "UP028",  # yield in for loop
    "UP045",  # Use X | None for Optional (requires 3.10+)
]

# Allow unused imports in __init__.py files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.mccabe]
# Maximum complexity (matching your flake8 setting)
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["hed"]
